name: Production Deployment Pipeline
# üöÄ Phase 16: Final Production Deployment

on:
  push:
    branches: [main]
    tags: ['v*']
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - staging
        - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Security and Quality Checks
  security-audit:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install safety bandit semgrep
          pip install -r backend/requirements.txt

      - name: Run security audit
        run: |
          echo "üîç Running security checks..."
          safety check --json --output safety_report.json || true
          bandit -r backend/ -f json -o bandit_report.json || true
          semgrep --config=auto backend/ --json --output=semgrep_report.json || true

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            safety_report.json
            bandit_report.json
            semgrep_report.json

  # Build and Test
  build-and-test:
    runs-on: ubuntu-latest
    needs: security-audit
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install -r backend/requirements.txt
          pip install pytest pytest-cov pytest-asyncio

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend-dashboard/package-lock.json

      - name: Install frontend dependencies
        run: |
          cd frontend-dashboard
          npm ci

      - name: Run backend tests
        env:
          DATABASE_URL: postgresql://postgres:test_password@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0
          ENVIRONMENT: test
        run: |
          cd backend
          python -m pytest tests/ -v --cov=. --cov-report=xml

      - name: Run frontend tests
        run: |
          cd frontend-dashboard
          npm run test

      - name: Build frontend
        run: |
          cd frontend-dashboard
          npm run build

      - name: Upload test coverage
        uses: codecov/codecov-action@v3
        with:
          file: backend/coverage.xml

  # Build Docker Images
  build-images:
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=sha,prefix={{branch}}-

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile.production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: frontend-dashboard
          file: frontend-dashboard/Dockerfile.production
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-images
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "üöÄ Deploying to staging environment..."
          # Add your staging deployment commands here
          # This could involve SSH to staging server, Kubernetes deployment, etc.

      - name: Run staging tests
        run: |
          echo "üß™ Running staging integration tests..."
          # Add staging test commands here

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build-images, deploy-staging]
    if: startsWith(github.ref, 'refs/tags/v') || github.event.inputs.environment == 'production'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create deployment
        id: deployment
        uses: actions/github-script@v7
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'production',
              description: 'Production deployment via GitHub Actions'
            });
            return deployment.data.id;

      - name: Deploy to production
        run: |
          echo "üöÄ Deploying to production environment..."
          # Add your production deployment commands here
          # This could involve:
          # - SSH to production servers
          # - Kubernetes rolling update
          # - Docker Swarm service update
          # - Cloud provider specific deployment

      - name: Run production health checks
        run: |
          echo "üè• Running production health checks..."
          # Add production health check commands here
          curl -f https://yourdomain.com/health || exit 1

      - name: Update deployment status (success)
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deployment.outputs.result }},
              state: 'success',
              environment_url: 'https://yourdomain.com',
              description: 'Production deployment successful'
            });

      - name: Update deployment status (failure)
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deployment.outputs.result }},
              state: 'failure',
              description: 'Production deployment failed'
            });

      - name: Notify deployment success
        if: success()
        run: |
          curl -X POST "${{ secrets.SLACK_WEBHOOK }}" \
            -H "Content-Type: application/json" \
            -d '{
              "text": "üéâ Production deployment successful!",
              "attachments": [{
                "color": "good",
                "fields": [
                  {"title": "Version", "value": "${{ github.ref }}", "short": true},
                  {"title": "Commit", "value": "${{ github.sha }}", "short": true},
                  {"title": "Environment", "value": "Production", "short": true},
                  {"title": "URL", "value": "https://yourdomain.com", "short": true}
                ]
              }]
            }'

  # Post-deployment monitoring
  post-deployment-monitoring:
    runs-on: ubuntu-latest
    needs: deploy-production
    if: success()
    
    steps:
      - name: Monitor deployment
        run: |
          echo "üìä Starting post-deployment monitoring..."
          sleep 300  # Wait 5 minutes for system to stabilize
          
          # Check application health
          curl -f https://yourdomain.com/health
          
          # Check key metrics
          curl -f https://yourdomain.com/api/operations/performance/current
          
          # Verify trading functionality
          curl -f https://yourdomain.com/api/trading/status
          
          echo "‚úÖ Post-deployment monitoring completed successfully"