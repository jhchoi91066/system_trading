# =============================================================================
# GitHub Actions CI/CD Pipeline
# Phase 15.1.3: Automated Build & Deploy
# =============================================================================

name: 🚀 Build and Deploy Trading Bot

on:
  push:
    branches: [ main, staging, development ]
  pull_request:
    branches: [ main, staging ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # =============================================================================
  # Testing & Quality Assurance
  # =============================================================================
  
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: trading_bot_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: 📁 Checkout code
        uses: actions/checkout@v4
      
      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: 📦 Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: 🔧 Install dependencies
        run: |
          cd backend
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-cov
      
      - name: 🔍 Run security tests
        run: |
          cd backend
          python -m pytest test_security.py -v
          python security_manager.py  # 암호화 테스트
          python rate_limiter.py      # 레이트 리미터 테스트
        env:
          ENVIRONMENT: test
          DB_HOST: localhost
          DB_PASSWORD: test_password
          REDIS_HOST: localhost
      
      - name: 📊 Generate coverage report
        run: |
          cd backend
          pytest --cov=. --cov-report=xml
      
      - name: 📤 Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: backend/coverage.xml

  # =============================================================================
  # Build Docker Images
  # =============================================================================
  
  build:
    name: 🏗️ Build Docker Images
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: 📁 Checkout code
        uses: actions/checkout@v4
      
      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: 🔐 Log into registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 🏗️ Build and push
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # =============================================================================
  # Deploy to Environments  
  # =============================================================================
  
  deploy-staging:
    name: 🎭 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/staging'
    environment:
      name: staging
      url: https://staging.trading-bot.com
    
    steps:
      - name: 🚀 Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # AWS ECS, Kubernetes, 또는 다른 배포 시스템 연동
          # 실제 배포 스크립트는 환경에 따라 다름
  
  deploy-production:
    name: 🌍 Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://trading-bot.com
    
    steps:
      - name: 🚀 Deploy to production
        run: |
          echo "Deploying to production environment..."
          # 프로덕션 배포는 수동 승인 후 실행
          # Blue-Green 배포 또는 Rolling 업데이트 전략 사용

  # =============================================================================
  # Security Scanning
  # =============================================================================
  
  security-scan:
    name: 🛡️ Security Scan
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: 📁 Checkout code
        uses: actions/checkout@v4
      
      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build.outputs.image-tag }}
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: 📤 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'