# =============================================================================
# Docker Compose for Bitcoin Trading Bot - Full Stack Development Environment
# Phase 15.1.3: Environment Separation & Containerization
# =============================================================================

version: '3.8'

services:
  # =============================================================================
  # Database Services
  # =============================================================================
  
  postgres:
    image: postgres:15-alpine
    container_name: trading-bot-postgres
    environment:
      POSTGRES_DB: trading_bot_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: dev_password
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d trading_bot_dev"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - trading-network
  
  redis:
    image: redis:7-alpine
    container_name: trading-bot-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - trading-network

  # =============================================================================
  # Backend Services
  # =============================================================================
  
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: trading-bot-backend
    environment:
      - ENVIRONMENT=development
      - DEBUG=true
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=trading_bot_dev
      - DB_USER=postgres
      - DB_PASSWORD=dev_password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=dev-jwt-secret-super-long-key-for-development
      - TRADINGVIEW_WEBHOOK_SECRET=dev_webhook_secret_123
      - DEMO_MODE=true
      - PORT=8000
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - ./backend/data:/app/data
      - backend_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - trading-network
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # TradingView Webhook Service (별도 컨테이너)
  webhook:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: trading-bot-webhook
    environment:
      - ENVIRONMENT=development
      - DEBUG=true
      - WEBHOOK_PORT=8081
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - TRADINGVIEW_WEBHOOK_SECRET=dev_webhook_secret_123
      - DEMO_MODE=true
    ports:
      - "8081:8081"
    volumes:
      - ./backend:/app
      - ./backend/data:/app/data
      - webhook_logs:/app/logs
    command: ["python", "tradingview_webhook.py"]
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - trading-network
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

# =============================================================================
# Volumes
# =============================================================================

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_logs:
    driver: local
  webhook_logs:
    driver: local

# =============================================================================
# Networks
# =============================================================================

networks:
  trading-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16