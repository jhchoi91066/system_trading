비트코인 시스템 트레이딩 프로그램: 초기 버전 데이터베이스 구조 (유지보수 용이성 중점) - Supabase 적용
초기 프로그램 완성 및 유지보수 용이성에 집중하기 위해, 이전에 제안된 데이터베이스 구조 검토 내용을 바탕으로 가장 필수적인 테이블들로 구성된 MVP (Minimum Viable Product) 데이터베이스 구조를 제안합니다. 이 구조는 핵심 기능을 지원하면서도 복잡성을 최소화하여 개발 및 유지보수 부담을 줄이는 데 중점을 둡니다.

Supabase를 백엔드 솔루션으로 채택함에 따라, PostgreSQL 기반의 모든 핵심 데이터는 Supabase의 관리형 PostgreSQL을 통해 제공됩니다. 이는 인프라 관리 부담을 크게 줄이고 개발 속도를 향상시킵니다.

향후 확장성을 고려하여 설계하되, 초기 버전에서는 불필요한 복잡성을 피하고 핵심 기능 구현에 집중합니다.

1. 초기 버전 데이터베이스 전략 (Supabase 중심)

관계형 데이터베이스 (Supabase PostgreSQL): 사용자, 전략, 거래 기록 등 핵심 비즈니스 데이터를 관리합니다. Supabase의 내장 인증(Auth), 실시간(Realtime) 기능과 연동하여 사용합니다.

시계열 데이터 처리 (Supabase PostgreSQL + TimescaleDB 확장 또는 외부): 대량의 시장 데이터(시세)를 저장합니다. 초기에는 Supabase PostgreSQL 내에서 TimescaleDB 확장을 활용하는 것을 우선적으로 검토하며, 필요시 별도의 시계열 DB를 고려합니다.

인메모리 데이터 저장소 (Redis 또는 Supabase Realtime): 캐싱, 세션 관리, 메시지 큐 등 고성능이 요구되는 휘발성 데이터 처리에 사용됩니다. Supabase Realtime이 일부 Redis의 Pub/Sub 기능을 대체할 수 있습니다.

2. Supabase PostgreSQL 스키마 상세 (초기 버전)

초기 버전에서는 다음 6가지 핵심 테이블에 집중합니다.

2.1. users 테이블

목적: 사용자 계정 정보 저장.

Supabase 적용: Supabase Auth와 긴밀하게 연동됩니다. auth.users 테이블이 기본 인증 정보를 관리하며, public.users 테이블은 auth.users.id를 참조하여 추가적인 사용자 프로필 정보를 저장하는 방식으로 구성됩니다.

유지보수 용이성: Supabase Auth가 사용자 등록, 로그인, 비밀번호 재설정 등을 처리하므로 개발 부담이 크게 줄어듭니다.

스키마 (public.users 테이블):

id (UUID): auth.users.id 참조 (Primary Key, Foreign Key)

username (VARCHAR(100)): 사용자 이름 (Unique, Nullable)

created_at (TIMESTAMP WITH TIME ZONE): 계정 생성 시각 (Default: CURRENT_TIMESTAMP)

updated_at (TIMESTAMP WITH TIME ZONE): 마지막 업데이트 시각 (Default: CURRENT_TIMESTAMP)

참고: email, password_hash 등은 auth.users 테이블에서 Supabase Auth가 관리합니다.

2.2. api_keys 테이블

목적: 암호화폐 거래소 API 키 저장.

Supabase 적용: PostgreSQL 테이블로 그대로 사용합니다. Row Level Security (RLS)를 통해 사용자 본인만 자신의 API 키에 접근할 수 있도록 강력한 보안 정책을 적용합니다.

유지보수 용이성: Supabase의 RLS를 통해 백엔드에서 복잡한 권한 로직을 구현할 필요 없이 데이터베이스 레벨에서 보안을 강화할 수 있습니다.

스키마:

id (UUID / BIGINT): API 키 고유 ID (Primary Key)

user_id (UUID / BIGINT): users.id 참조 (Foreign Key, Not Null)

exchange_name (VARCHAR(50)): 거래소 이름 (예: 'Binance', 'Upbit') (Not Null)

api_key_encrypted (TEXT): 암호화된 API Key (Not Null)

secret_key_encrypted (TEXT): 암호화된 Secret Key (Not Null)

is_active (BOOLEAN): 활성화 여부 (Default: TRUE)

created_at (TIMESTAMP WITH TIME ZONE): 생성 시각 (Default: CURRENT_TIMESTAMP)

2.3. strategies 테이블

목적: 사용자가 생성한 매매 전략 정보 저장.

Supabase 적용: PostgreSQL 테이블로 그대로 사용합니다. code_content 필드는 초기에는 텍스트로 저장하며, 향후 Supabase Storage를 활용하여 별도 파일로 관리하는 것을 고려할 수 있습니다.

유지보수 용이성: 전략 메타데이터를 쉽게 관리하고, RLS를 통해 사용자별 전략 접근을 제어합니다.

스키마:

id (UUID / BIGINT): 전략 고유 ID (Primary Key)

user_id (UUID / BIGINT): users.id 참조 (Foreign Key, Not Null)

name (VARCHAR(255)): 전략 이름 (Not Null)

description (TEXT): 전략 설명 (Nullable)

strategy_type (VARCHAR(50)): 전략 유형 (예: 'PREDEFINED', 'CUSTOM_PYTHON') (Not Null)

code_content (TEXT): 사용자 정의 Python 코드 (JSON 문자열 또는 직접 코드) (Nullable)

parameters (JSONB): 전략 파라미터 (JSON 형태로 저장) (Nullable)

is_active (BOOLEAN): 활성화 여부 (Default: FALSE)

created_at (TIMESTAMP WITH TIME ZONE): 생성 시각 (Default: CURRENT_TIMESTAMP)

2.4. strategy_executions 테이블

목적: 각 전략의 실행 인스턴스 정보 저장 (백테스팅, 실시간 트레이딩).

Supabase 적용: PostgreSQL 테이블로 그대로 사용합니다.

유지보수 용이성: 전략 실행의 기본적인 이력을 추적하며, RLS를 통해 사용자별 실행 기록 접근을 제어합니다.

스키마:

id (UUID / BIGINT): 실행 고유 ID (Primary Key)

strategy_id (UUID / BIGINT): strategies.id 참조 (Foreign Key, Not Null)

api_key_id (UUID / BIGINT): api_keys.id 참조 (실시간 트레이딩 시) (Nullable)

execution_type (VARCHAR(20)): 실행 유형 (예: 'LIVE', 'BACKTEST') (Not Null)

status (VARCHAR(20)): 현재 상태 (예: 'RUNNING', 'COMPLETED', 'STOPPED', 'ERROR') (Not Null)

start_time (TIMESTAMP WITH TIME ZONE): 실행 시작 시각 (Default: CURRENT_TIMESTAMP)

end_time (TIMESTAMP WITH TIME ZONE): 실행 종료 시각 (Nullable)

initial_capital (DECIMAL(18, 8)): 초기 자본 (Not Null)

final_capital (DECIMAL(18, 8)): 최종 자본 (완료 시) (Nullable)

profit_loss_percentage (DECIMAL(5, 2)): 총 수익률 (%) (Nullable)

error_message (TEXT): 오류 발생 시 메시지 (Nullable)

2.5. trades 테이블

목적: 모든 매매 주문 및 체결 내역 저장.

Supabase 적용: PostgreSQL 테이블로 그대로 사용합니다. Supabase Realtime 기능을 활용하여 프론트엔드에서 실시간 거래 내역 업데이트를 쉽게 구현할 수 있습니다.

유지보수 용이성: 백테스팅과 실시간 거래의 모든 개별 거래를 기록하는 핵심 테이블입니다. 초기에는 이 테이블을 통해 모든 거래 데이터를 관리하고, 성능 문제가 발생하면 집계 테이블(daily_trade_summary 등)을 추가합니다.

스키마:

id (UUID / BIGINT): 거래 고유 ID (Primary Key)

execution_id (UUID / BIGINT): strategy_executions.id 참조 (Foreign Key, Not Null)

order_id (VARCHAR(255)): 거래소 주문 ID (실시간 트레이딩 시) (Nullable)

timestamp (TIMESTAMP WITH TIME ZONE): 거래 발생 시각 (Not Null)

symbol (VARCHAR(20)): 거래 심볼 (예: 'BTC/USDT') (Not Null)

side (VARCHAR(10)): 매매 종류 ('BUY', 'SELL') (Not Null)

type (VARCHAR(20)): 주문 유형 ('MARKET', 'LIMIT') (Not Null)

price (DECIMAL(18, 8)): 체결 가격 (Not Null)

amount (DECIMAL(18, 8)): 체결 수량 (Not Null)

cost (DECIMAL(18, 8)): 총 거래 금액 (price * amount) (Not Null)

fee (DECIMAL(18, 8)): 거래 수수료 (Nullable)

status (VARCHAR(20)): 주문 상태 (예: 'FILLED', 'PARTIALLY_FILLED', 'CANCELED') (Not Null)

is_backtest (BOOLEAN): 백테스팅 거래 여부 (Not Null, Default: FALSE)

2.6. notifications 테이블

목적: 사용자에게 발송된 알림 내역 저장.

Supabase 적용: PostgreSQL 테이블로 그대로 사용합니다. Supabase Realtime 기능을 통해 사용자에게 실시간 알림을 푸시할 수 있습니다.

유지보수 용이성: 사용자에게 중요한 정보를 전달하고, 알림 이력을 관리하는 데 필수적입니다.

스키마:

id (UUID / BIGINT): 알림 고유 ID (Primary Key)

user_id (UUID / BIGINT): users.id 참조 (Foreign Key, Not Null)

type (VARCHAR(50)): 알림 유형 (예: 'ORDER_FILLED', 'ERROR') (Not Null)

message (TEXT): 알림 내용 (Not Null)

is_read (BOOLEAN): 읽음 여부 (Default: FALSE)

created_at (TIMESTAMP WITH TIME ZONE): 생성 시각 (Default: CURRENT_TIMESTAMP)

3. 시계열 데이터 처리 (Supabase PostgreSQL + TimescaleDB 확장 또는 외부)

market_data (Supabase PostgreSQL 내 Hypertable 또는 외부 DB):

목적: 비트코인 시세 데이터 저장.

Supabase 적용:

우선 검토: Supabase의 PostgreSQL에서 TimescaleDB 확장을 지원하는지 확인하고, 지원한다면 ohlcv 데이터를 Hypertable로 구성하여 사용합니다. 이는 PostgreSQL의 친숙함과 시계열 데이터 처리의 효율성을 동시에 잡을 수 있는 가장 좋은 방법입니다.

대안: 만약 TimescaleDB 확장이 어렵거나, 대규모 데이터 및 고성능 쿼리 요구사항이 매우 높다면, AWS Timestream, Google Cloud BigQuery 등 별도의 관리형 시계열 데이터베이스 서비스를 구축하여 연동합니다.

유지보수 용이성: TimescaleDB 확장을 사용하면 단일 DB 관리의 이점을 누리면서도 시계열 데이터에 최적화된 성능을 얻을 수 있습니다.

스키마 (TimescaleDB Hypertable 예시):

table_name: ohlcv

columns: timestamp (TIMESTAMP WITH TIME ZONE, Primary Key), symbol (VARCHAR(20)), interval (VARCHAR(10)), exchange (VARCHAR(50)), open (DECIMAL(18, 8)), high (DECIMAL(18, 8)), low (DECIMAL(18, 8)), close (DECIMAL(18, 8)), volume (DECIMAL(18, 8))

hypertable_config: timestamp 컬럼을 기준으로 파티셔닝.

4. Redis 활용 (초기 버전 - Supabase 대체 및 외부 연동)

캐싱:

Supabase 대체: Supabase의 PostgreSQL은 일반적인 캐싱 요구사항(예: 자주 조회되는 정적 데이터)을 처리할 수 있으며, 클라이언트 측 캐싱 전략을 강화할 수 있습니다.

외부 Redis: 실시간 잔고, 최근 시세 데이터 등 매우 빠른 읽기/쓰기가 필요한 휘발성 데이터 캐싱, 또는 분산 락, 복잡한 세션 관리 등 Redis의 고유한 기능이 필수적인 경우, AWS ElastiCache for Redis와 같은 외부 관리형 Redis 서비스를 별도로 구축하여 연동합니다. 초기에는 이 부분을 최소화하고, 성능 병목이 발생할 때 도입을 고려합니다.

세션 관리: Supabase Auth가 세션 관리를 처리하므로, 별도의 Redis 기반 세션 관리는 초기에는 불필요합니다.

메시지 브로커:

Supabase Realtime: trades나 notifications 테이블의 변경 사항을 프론트엔드에 실시간으로 푸시하는 데 Supabase Realtime 기능을 활용합니다. 이는 Redis Pub/Sub의 일부 기능을 대체합니다.

Celery 브로커: 백엔드에서 Celery와 같은 비동기 작업 큐를 사용한다면, Celery의 브로커로는 외부 Redis 인스턴스가 여전히 필요할 수 있습니다. 초기에는 이 부분의 도입을 최소화하거나, Supabase Edge Functions와 같은 서버리스 기능으로 대체 가능성을 검토합니다.

5. 유지보수 용이성 및 Supabase의 장점

관리형 서비스: 데이터베이스 인프라(서버, 백업, 보안 패치, 확장) 관리를 Supabase에 위임하여 개발팀의 유지보수 부담을 크게 줄입니다.

통합된 기능: 인증(Auth), 실시간(Realtime), 스토리지(Storage), 엣지 함수(Edge Functions) 등 백엔드에 필요한 여러 기능이 PostgreSQL과 통합되어 있어 개발 및 배포가 간소화됩니다.

Row Level Security (RLS): 데이터베이스 레벨에서 강력한 접근 제어를 구현하여 보안을 강화하고, 백엔드 애플리케이션 코드의 복잡성을 줄입니다.

개발 속도: 직관적인 대시보드와 클라이언트 라이브러리(JS, Python 등)를 통해 빠른 개발이 가능합니다.

점진적 확장: 초기에는 Supabase 내부 기능들을 최대한 활용하고, 성능 요구사항이 증가하거나 특정 기능이 필요할 때 외부 서비스를 점진적으로 연동하여 확장합니다.

이 Supabase 기반의 초기 데이터베이스 구조는 유지보수 용이성을 극대화하면서도, 비트코인 시스템 트레이딩 프로그램의 핵심 기능을 안정적으로 지원할 수 있는 견고한 기반을 제공할 것입니다.

-- Supabase PostgreSQL 데이터베이스 스키마

-- 1. `users` 테이블
-- 목적: 사용자 계정 정보 저장 (Supabase Auth의 auth.users 테이블과 연동)
-- 설명: auth.users 테이블의 ID를 참조하여 추가적인 사용자 프로필 정보를 저장합니다.
CREATE TABLE public.users (
    id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
    username VARCHAR(100) UNIQUE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- RLS (Row Level Security) 정책 예시: 사용자 본인만 자신의 프로필을 읽고 수정할 수 있도록 설정
ALTER TABLE public.users ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Users can view their own profile." ON public.users FOR SELECT USING (auth.uid() = id);
CREATE POLICY "Users can update their own profile." ON public.users FOR UPDATE USING (auth.uid() = id);

-- 2. `api_keys` 테이블
-- 목적: 암호화폐 거래소 API 키 저장
-- 설명: 사용자별로 연동된 거래소 API 키와 시크릿 키를 암호화하여 저장합니다.
CREATE TABLE public.api_keys (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,
    exchange_name VARCHAR(50) NOT NULL, -- 예: 'Binance', 'Upbit'
    api_key_encrypted TEXT NOT NULL,    -- 암호화된 API Key
    secret_key_encrypted TEXT NOT NULL, -- 암호화된 Secret Key
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- RLS 정책 예시: 사용자 본인만 자신의 API 키에 접근할 수 있도록 설정
ALTER TABLE public.api_keys ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Users can manage their own API keys." ON public.api_keys
FOR ALL USING (auth.uid() = user_id);

-- 3. `strategies` 테이블
-- 목적: 사용자가 생성한 매매 전략 정보 저장
-- 설명: 전략의 메타데이터와 파이썬 코드(또는 참조)를 저장합니다.
CREATE TABLE public.strategies (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    strategy_type VARCHAR(50) NOT NULL, -- 예: 'PREDEFINED', 'CUSTOM_PYTHON'
    code_content TEXT,                  -- 사용자 정의 Python 코드 (초기 버전)
    parameters JSONB,                   -- 전략 파라미터 (JSON 형태로 저장)
    is_active BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- RLS 정책 예시: 사용자 본인만 자신의 전략에 접근할 수 있도록 설정
ALTER TABLE public.strategies ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Users can manage their own strategies." ON public.strategies
FOR ALL USING (auth.uid() = user_id);

-- 4. `strategy_executions` 테이블
-- 목적: 각 전략의 실행 인스턴스 정보 저장 (백테스팅, 실시간 트레이딩)
-- 설명: 전략 실행의 기본적인 이력과 요약 결과를 기록합니다.
CREATE TABLE public.strategy_executions (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    strategy_id BIGINT NOT NULL REFERENCES public.strategies(id) ON DELETE CASCADE,
    api_key_id BIGINT REFERENCES public.api_keys(id) ON DELETE SET NULL, -- 실시간 트레이딩 시 사용
    execution_type VARCHAR(20) NOT NULL, -- 'LIVE', 'BACKTEST'
    status VARCHAR(20) NOT NULL,         -- 'RUNNING', 'COMPLETED', 'STOPPED', 'ERROR'
    start_time TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    end_time TIMESTAMP WITH TIME ZONE,
    initial_capital DECIMAL(18, 8) NOT NULL,
    final_capital DECIMAL(18, 8),
    profit_loss_percentage DECIMAL(5, 2), -- 총 수익률 (%)
    error_message TEXT
);

-- RLS 정책 예시: 사용자 본인만 자신의 전략 실행 기록에 접근할 수 있도록 설정
ALTER TABLE public.strategy_executions ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Users can view their own strategy executions." ON public.strategy_executions
FOR SELECT USING (auth.uid() = (SELECT user_id FROM public.strategies WHERE id = strategy_id));
CREATE POLICY "Users can create/update/delete their own strategy executions." ON public.strategy_executions
FOR ALL USING (auth.uid() = (SELECT user_id FROM public.strategies WHERE id = strategy_id));


-- 5. `trades` 테이블
-- 목적: 모든 매매 주문 및 체결 내역 저장
-- 설명: 백테스팅 및 실시간 거래에서 발생한 모든 개별 거래를 기록합니다.
CREATE TABLE public.trades (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    execution_id BIGINT NOT NULL REFERENCES public.strategy_executions(id) ON DELETE CASCADE,
    order_id VARCHAR(255),               -- 거래소 주문 ID (실시간 트레이딩 시)
    timestamp TIMESTAMP WITH TIME ZONE NOT NULL,
    symbol VARCHAR(20) NOT NULL,         -- 예: 'BTC/USDT'
    side VARCHAR(10) NOT NULL,           -- 'BUY', 'SELL'
    type VARCHAR(20) NOT NULL,           -- 'MARKET', 'LIMIT'
    price DECIMAL(18, 8) NOT NULL,
    amount DECIMAL(18, 8) NOT NULL,
    cost DECIMAL(18, 8) NOT NULL,        -- price * amount
    fee DECIMAL(18, 8),
    status VARCHAR(20) NOT NULL,         -- 'FILLED', 'PARTIALLY_FILLED', 'CANCELED'
    is_backtest BOOLEAN DEFAULT FALSE NOT NULL
);

-- RLS 정책 예시: 사용자 본인만 자신의 거래 내역에 접근할 수 있도록 설정
ALTER TABLE public.trades ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Users can view their own trades." ON public.trades
FOR SELECT USING (auth.uid() = (SELECT s.user_id FROM public.strategy_executions se JOIN public.strategies s ON se.strategy_id = s.id WHERE se.id = execution_id));
CREATE POLICY "Users can insert their own trades." ON public.trades
FOR INSERT WITH CHECK (auth.uid() = (SELECT s.user_id FROM public.strategy_executions se JOIN public.strategies s ON se.strategy_id = s.id WHERE se.id = execution_id));


-- 6. `notifications` 테이블
-- 목적: 사용자에게 발송된 알림 내역 저장
-- 설명: 알림 내용, 유형, 발송 시간 등을 기록합니다.
CREATE TABLE public.notifications (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,
    type VARCHAR(50) NOT NULL,           -- 예: 'ORDER_FILLED', 'ERROR', 'SL_HIT'
    message TEXT NOT NULL,
    is_read BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- RLS 정책 예시: 사용자 본인만 자신의 알림에 접근할 수 있도록 설정
ALTER TABLE public.notifications ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Users can view their own notifications." ON public.notifications
FOR ALL USING (auth.uid() = user_id);


-- 7. `market_data` 테이블 (TimescaleDB Hypertable 사용 권장)
-- 목적: 비트코인 시세 데이터 저장 (OHLCV)
-- 설명: 대량의 시계열 데이터를 효율적으로 저장하고 조회합니다.
-- Supabase에서 TimescaleDB 확장이 활성화되어 있어야 합니다.
-- 활성화 방법: Supabase 대시보드 -> Database -> Extensions -> 'timescaledb' 검색 후 활성화
CREATE TABLE public.market_data (
    timestamp TIMESTAMP WITH TIME ZONE NOT NULL,
    symbol VARCHAR(20) NOT NULL,         -- 예: 'BTC/USDT'
    interval VARCHAR(10) NOT NULL,       -- 예: '1m', '1h'
    exchange VARCHAR(50) NOT NULL,       -- 예: 'Binance'
    open DECIMAL(18, 8) NOT NULL,
    high DECIMAL(18, 8) NOT NULL,
    low DECIMAL(18, 8) NOT NULL,
    close DECIMAL(18, 8) NOT NULL,
    volume DECIMAL(18, 8) NOT NULL
);

-- TimescaleDB Hypertable로 변환 (Supabase에서 TimescaleDB 확장이 활성화된 후 실행)
-- SELECT create_hypertable('public.market_data', 'timestamp');

-- 시계열 데이터에 대한 인덱스 (쿼리 성능 향상)
CREATE INDEX IF NOT EXISTS idx_market_data_symbol_interval_timestamp ON public.market_data (symbol, interval, timestamp DESC);
CREATE INDEX IF NOT EXISTS idx_market_data_exchange_timestamp ON public.market_data (exchange, timestamp DESC);

-- RLS 정책 예시: market_data는 일반적으로 모든 사용자에게 읽기 권한을 부여합니다.
ALTER TABLE public.market_data ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow all authenticated users to read market data." ON public.market_data
FOR SELECT USING (auth.role() = 'authenticated');


-- 인덱스 추가 (성능 최적화)
-- 자주 조회되는 컬럼에 인덱스를 추가하여 쿼리 속도를 향상시킵니다.
CREATE INDEX IF NOT EXISTS idx_api_keys_user_id ON public.api_keys (user_id);
CREATE INDEX IF NOT EXISTS idx_strategies_user_id ON public.strategies (user_id);
CREATE INDEX IF NOT EXISTS idx_strategy_executions_strategy_id ON public.strategy_executions (strategy_id);
CREATE INDEX IF NOT EXISTS idx_trades_execution_id_timestamp ON public.trades (execution_id, timestamp DESC);
CREATE INDEX IF NOT EXISTS idx_trades_symbol_timestamp ON public.trades (symbol, timestamp DESC);
CREATE INDEX IF NOT EXISTS idx_notifications_user_id_created_at ON public.notifications (user_id, created_at DESC);

