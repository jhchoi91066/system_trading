"""
Í≥†Í∏â Í∏∞Ïà†Ï†Å ÏßÄÌëú Í≥ÑÏÇ∞Í∏∞
CCI, RSI, MACD Ïô∏ Ï∂îÍ∞Ä ÏßÄÌëúÎì§Í≥º Ï°∞Ìï© Ï†ÑÎûµ
"""

import pandas as pd
import numpy as np
import talib
from typing import Dict, List, Tuple, Optional, Any
from dataclasses import dataclass
from enum import Enum
import logging
from datetime import datetime, timedelta

logger = logging.getLogger(__name__)

class SignalStrength(Enum):
    """Ïã†Ìò∏ Í∞ïÎèÑ"""
    VERY_WEAK = 1
    WEAK = 2
    MODERATE = 3
    STRONG = 4
    VERY_STRONG = 5

class TrendDirection(Enum):
    """Ìä∏Î†åÎìú Î∞©Ìñ•"""
    BULLISH = "bullish"
    BEARISH = "bearish"
    SIDEWAYS = "sideways"

@dataclass
class IndicatorSignal:
    """ÏßÄÌëú Ïã†Ìò∏"""
    indicator: str
    signal: str  # BUY, SELL, HOLD
    strength: SignalStrength
    confidence: float  # 0-1
    value: float
    timestamp: datetime
    metadata: Dict[str, Any] = None

@dataclass
class CompositeSignal:
    """Î≥µÌï© Ïã†Ìò∏"""
    overall_signal: str  # BUY, SELL, HOLD
    confidence: float  # 0-1
    strength: SignalStrength
    contributing_signals: List[IndicatorSignal]
    trend_direction: TrendDirection
    timestamp: datetime

class AdvancedIndicators:
    """Í≥†Í∏â Í∏∞Ïà†Ï†Å ÏßÄÌëú Í≥ÑÏÇ∞Í∏∞"""
    
    def __init__(self):
        self.indicators_cache = {}
        self.signal_history = []
        self.max_history = 1000
        
        # ÏßÄÌëúÎ≥Ñ Í∞ÄÏ§ëÏπò ÏÑ§Ï†ï
        self.indicator_weights = {
            'cci': 0.25,
            'rsi': 0.20, 
            'macd': 0.20,
            'bollinger': 0.15,
            'stochastic': 0.10,
            'adx': 0.10
        }
        
        logger.info("üî¢ Advanced Indicators initialized")
    
    def calculate_all_indicators(self, df: pd.DataFrame) -> Dict[str, Dict]:
        """Î™®Îì† ÏßÄÌëú Í≥ÑÏÇ∞"""
        if df is None or len(df) < 50:
            logger.warning("‚ö†Ô∏è Insufficient data for indicator calculation")
            return {}
        
        try:
            indicators = {}
            
            # Í∏∞Î≥∏ Í∞ÄÍ≤© Ï†ïÎ≥¥
            high = df['high'].values
            low = df['low'].values  
            close = df['close'].values
            volume = df['volume'].values if 'volume' in df.columns else np.ones(len(close))
            
            # 1. CCI (Commodity Channel Index)
            indicators['cci'] = self._calculate_cci(high, low, close)
            
            # 2. RSI (Relative Strength Index)
            indicators['rsi'] = self._calculate_rsi(close)
            
            # 3. MACD (Moving Average Convergence Divergence)
            indicators['macd'] = self._calculate_macd(close)
            
            # 4. Bollinger Bands
            indicators['bollinger'] = self._calculate_bollinger_bands(close)
            
            # 5. Stochastic Oscillator  
            indicators['stochastic'] = self._calculate_stochastic(high, low, close)
            
            # 6. ADX (Average Directional Index)
            indicators['adx'] = self._calculate_adx(high, low, close)
            
            # 7. Williams %R
            indicators['williams_r'] = self._calculate_williams_r(high, low, close)
            
            # 8. Ichimoku Cloud
            indicators['ichimoku'] = self._calculate_ichimoku(high, low, close)
            
            # 9. Volume indicators
            indicators['volume_sma'] = self._calculate_volume_indicators(close, volume)
            
            logger.info(f"‚úÖ Calculated {len(indicators)} indicators")
            return indicators
            
        except Exception as e:
            logger.error(f"üî¥ Error calculating indicators: {e}")
            return {}
    
    def _calculate_cci(self, high, low, close, period=20) -> Dict:
        """CCI Í≥ÑÏÇ∞"""
        try:
            cci = talib.CCI(high, low, close, timeperiod=period)
            
            return {
                'values': cci,
                'current': cci[-1] if not np.isnan(cci[-1]) else 0,
                'previous': cci[-2] if len(cci) > 1 and not np.isnan(cci[-2]) else 0,
                'overbought': cci[-1] > 100,
                'oversold': cci[-1] < -100,
                'crossover_up': cci[-2] < -100 and cci[-1] > -100,
                'crossover_down': cci[-2] > 100 and cci[-1] < 100
            }
        except:
            return {'values': np.array([]), 'current': 0, 'previous': 0}
    
    def _calculate_rsi(self, close, period=14) -> Dict:
        """RSI Í≥ÑÏÇ∞"""
        try:
            rsi = talib.RSI(close, timeperiod=period)
            
            return {
                'values': rsi,
                'current': rsi[-1] if not np.isnan(rsi[-1]) else 50,
                'previous': rsi[-2] if len(rsi) > 1 and not np.isnan(rsi[-2]) else 50,
                'overbought': rsi[-1] > 70,
                'oversold': rsi[-1] < 30,
                'neutral': 30 <= rsi[-1] <= 70
            }
        except:
            return {'values': np.array([]), 'current': 50, 'previous': 50}
    
    def _calculate_macd(self, close) -> Dict:
        """MACD Í≥ÑÏÇ∞"""
        try:
            macd_line, macd_signal, macd_histogram = talib.MACD(close, fastperiod=12, slowperiod=26, signalperiod=9)
            
            return {
                'macd_line': macd_line,
                'signal_line': macd_signal,
                'histogram': macd_histogram,
                'current_macd': macd_line[-1] if not np.isnan(macd_line[-1]) else 0,
                'current_signal': macd_signal[-1] if not np.isnan(macd_signal[-1]) else 0,
                'current_histogram': macd_histogram[-1] if not np.isnan(macd_histogram[-1]) else 0,
                'bullish_crossover': (macd_line[-2] < macd_signal[-2] and macd_line[-1] > macd_signal[-1]),
                'bearish_crossover': (macd_line[-2] > macd_signal[-2] and macd_line[-1] < macd_signal[-1])
            }
        except:
            return {'macd_line': np.array([]), 'signal_line': np.array([]), 'histogram': np.array([])}
    
    def _calculate_bollinger_bands(self, close, period=20, std_dev=2) -> Dict:
        """Î≥ºÎ¶∞Ï†Ä Î∞¥Îìú Í≥ÑÏÇ∞"""
        try:
            upper, middle, lower = talib.BBANDS(close, timeperiod=period, nbdevup=std_dev, nbdevdn=std_dev)
            
            current_price = close[-1]
            bb_width = (upper[-1] - lower[-1]) / middle[-1] * 100
            bb_position = (current_price - lower[-1]) / (upper[-1] - lower[-1])
            
            return {
                'upper': upper,
                'middle': middle,
                'lower': lower,
                'current_upper': upper[-1],
                'current_middle': middle[-1],
                'current_lower': lower[-1],
                'bb_width': bb_width,
                'bb_position': bb_position,
                'price_above_upper': current_price > upper[-1],
                'price_below_lower': current_price < lower[-1],
                'squeeze': bb_width < 10  # Î∞¥Îìú Ìè≠Ïù¥ Ï¢ÅÏùÄ Í≤ΩÏö∞
            }
        except:
            return {'upper': np.array([]), 'middle': np.array([]), 'lower': np.array([])}
    
    def _calculate_stochastic(self, high, low, close, k_period=14, d_period=3) -> Dict:
        """Ïä§ÌÜ†Ï∫êÏä§Ìã± Í≥ÑÏÇ∞"""
        try:
            slowk, slowd = talib.STOCH(high, low, close, fastk_period=k_period, slowk_period=3, slowd_period=d_period)
            
            return {
                'k_line': slowk,
                'd_line': slowd,
                'current_k': slowk[-1] if not np.isnan(slowk[-1]) else 50,
                'current_d': slowd[-1] if not np.isnan(slowd[-1]) else 50,
                'overbought': slowk[-1] > 80,
                'oversold': slowk[-1] < 20,
                'bullish_crossover': (slowk[-2] < slowd[-2] and slowk[-1] > slowd[-1]),
                'bearish_crossover': (slowk[-2] > slowd[-2] and slowk[-1] < slowd[-1])
            }
        except:
            return {'k_line': np.array([]), 'd_line': np.array([])}
    
    def _calculate_adx(self, high, low, close, period=14) -> Dict:
        """ADX Í≥ÑÏÇ∞ (Ìä∏Î†åÎìú Í∞ïÎèÑ)"""
        try:
            adx = talib.ADX(high, low, close, timeperiod=period)
            plus_di = talib.PLUS_DI(high, low, close, timeperiod=period)
            minus_di = talib.MINUS_DI(high, low, close, timeperiod=period)
            
            current_adx = adx[-1] if not np.isnan(adx[-1]) else 0
            
            # Ìä∏Î†åÎìú Í∞ïÎèÑ Î∂ÑÎ•ò
            if current_adx > 50:
                trend_strength = "very_strong"
            elif current_adx > 25:
                trend_strength = "strong"
            elif current_adx > 20:
                trend_strength = "moderate"
            else:
                trend_strength = "weak"
            
            return {
                'adx': adx,
                'plus_di': plus_di,
                'minus_di': minus_di,
                'current_adx': current_adx,
                'current_plus_di': plus_di[-1] if not np.isnan(plus_di[-1]) else 0,
                'current_minus_di': minus_di[-1] if not np.isnan(minus_di[-1]) else 0,
                'trend_strength': trend_strength,
                'bullish_trend': plus_di[-1] > minus_di[-1],
                'bearish_trend': plus_di[-1] < minus_di[-1]
            }
        except:
            return {'adx': np.array([]), 'trend_strength': 'weak'}
    
    def _calculate_williams_r(self, high, low, close, period=14) -> Dict:
        """Williams %R Í≥ÑÏÇ∞"""
        try:
            williams_r = talib.WILLR(high, low, close, timeperiod=period)
            
            return {
                'values': williams_r,
                'current': williams_r[-1] if not np.isnan(williams_r[-1]) else -50,
                'overbought': williams_r[-1] > -20,
                'oversold': williams_r[-1] < -80
            }
        except:
            return {'values': np.array([]), 'current': -50}
    
    def _calculate_ichimoku(self, high, low, close) -> Dict:
        """Ïù¥ÏπòÎ™®Ïø† Í≥ÑÏÇ∞"""
        try:
            # Tenkan-sen (Ï†ÑÌôòÏÑ†): 9Ïùº ÏµúÍ≥†Í∞Ä+ÏµúÏ†ÄÍ∞ÄÏùò Ï§ëÍ∞ÑÍ∞í
            tenkan_high = pd.Series(high).rolling(9).max()
            tenkan_low = pd.Series(low).rolling(9).min()
            tenkan_sen = (tenkan_high + tenkan_low) / 2
            
            # Kijun-sen (Í∏∞Ï§ÄÏÑ†): 26Ïùº ÏµúÍ≥†Í∞Ä+ÏµúÏ†ÄÍ∞ÄÏùò Ï§ëÍ∞ÑÍ∞í
            kijun_high = pd.Series(high).rolling(26).max()
            kijun_low = pd.Series(low).rolling(26).min()
            kijun_sen = (kijun_high + kijun_low) / 2
            
            # Senkou Span A (ÏÑ†ÌñâÏä§Ìå¨A): (Ï†ÑÌôòÏÑ†+Í∏∞Ï§ÄÏÑ†)/2 ÏùÑ 26Ïùº ÏïûÏúºÎ°ú
            senkou_a = ((tenkan_sen + kijun_sen) / 2).shift(26)
            
            # Senkou Span B (ÏÑ†ÌñâÏä§Ìå¨B): 52Ïùº ÏµúÍ≥†Í∞Ä+ÏµúÏ†ÄÍ∞ÄÏùò Ï§ëÍ∞ÑÍ∞íÏùÑ 26Ïùº ÏïûÏúºÎ°ú
            senkou_b_high = pd.Series(high).rolling(52).max()
            senkou_b_low = pd.Series(low).rolling(52).min()
            senkou_b = ((senkou_b_high + senkou_b_low) / 2).shift(26)
            
            current_price = close[-1]
            cloud_top = max(senkou_a.iloc[-1], senkou_b.iloc[-1]) if not pd.isna(senkou_a.iloc[-1]) else current_price
            cloud_bottom = min(senkou_a.iloc[-1], senkou_b.iloc[-1]) if not pd.isna(senkou_a.iloc[-1]) else current_price
            
            return {
                'tenkan_sen': tenkan_sen.values,
                'kijun_sen': kijun_sen.values,
                'senkou_a': senkou_a.values,
                'senkou_b': senkou_b.values,
                'current_tenkan': tenkan_sen.iloc[-1] if not pd.isna(tenkan_sen.iloc[-1]) else current_price,
                'current_kijun': kijun_sen.iloc[-1] if not pd.isna(kijun_sen.iloc[-1]) else current_price,
                'price_above_cloud': current_price > cloud_top,
                'price_below_cloud': current_price < cloud_bottom,
                'price_in_cloud': cloud_bottom <= current_price <= cloud_top,
                'bullish_tk_cross': tenkan_sen.iloc[-1] > kijun_sen.iloc[-1] and tenkan_sen.iloc[-2] <= kijun_sen.iloc[-2],
                'bearish_tk_cross': tenkan_sen.iloc[-1] < kijun_sen.iloc[-1] and tenkan_sen.iloc[-2] >= kijun_sen.iloc[-2]
            }
        except:
            return {'tenkan_sen': np.array([]), 'kijun_sen': np.array([])}
    
    def _calculate_volume_indicators(self, close, volume) -> Dict:
        """Í±∞ÎûòÎüâ ÏßÄÌëú"""
        try:
            # Volume SMA
            vol_sma = pd.Series(volume).rolling(20).mean()
            
            # On-Balance Volume (OBV)
            obv = talib.OBV(close, volume)
            
            # Volume Rate of Change
            vol_roc = pd.Series(volume).pct_change(20) * 100
            
            current_volume = volume[-1]
            avg_volume = vol_sma.iloc[-1] if not pd.isna(vol_sma.iloc[-1]) else current_volume
            
            return {
                'volume_sma': vol_sma.values,
                'obv': obv,
                'volume_roc': vol_roc.values,
                'current_volume': current_volume,
                'avg_volume': avg_volume,
                'volume_surge': current_volume > avg_volume * 1.5,
                'volume_dry': current_volume < avg_volume * 0.5,
                'obv_trending_up': obv[-1] > obv[-20] if len(obv) > 20 else False
            }
        except:
            return {'volume_sma': np.array([]), 'obv': np.array([])}
    
    def generate_individual_signals(self, indicators: Dict) -> List[IndicatorSignal]:
        """Í∞Å ÏßÄÌëúÎ≥Ñ Í∞úÎ≥Ñ Ïã†Ìò∏ ÏÉùÏÑ±"""
        signals = []
        timestamp = datetime.now()
        
        try:
            # 1. CCI Ïã†Ìò∏
            if 'cci' in indicators:
                cci_data = indicators['cci']
                if cci_data.get('crossover_up'):
                    signals.append(IndicatorSignal(
                        indicator='cci',
                        signal='BUY',
                        strength=SignalStrength.STRONG,
                        confidence=0.8,
                        value=cci_data['current'],
                        timestamp=timestamp,
                        metadata={'crossover_type': 'oversold_recovery'}
                    ))
                elif cci_data.get('crossover_down'):
                    signals.append(IndicatorSignal(
                        indicator='cci',
                        signal='SELL',
                        strength=SignalStrength.STRONG,
                        confidence=0.8,
                        value=cci_data['current'],
                        timestamp=timestamp,
                        metadata={'crossover_type': 'overbought_correction'}
                    ))
            
            # 2. RSI Ïã†Ìò∏
            if 'rsi' in indicators:
                rsi_data = indicators['rsi']
                rsi_value = rsi_data['current']
                
                if rsi_value < 30:
                    signals.append(IndicatorSignal(
                        indicator='rsi',
                        signal='BUY',
                        strength=SignalStrength.MODERATE,
                        confidence=0.6,
                        value=rsi_value,
                        timestamp=timestamp,
                        metadata={'condition': 'oversold'}
                    ))
                elif rsi_value > 70:
                    signals.append(IndicatorSignal(
                        indicator='rsi',
                        signal='SELL', 
                        strength=SignalStrength.MODERATE,
                        confidence=0.6,
                        value=rsi_value,
                        timestamp=timestamp,
                        metadata={'condition': 'overbought'}
                    ))
            
            # 3. MACD Ïã†Ìò∏
            if 'macd' in indicators:
                macd_data = indicators['macd']
                if macd_data.get('bullish_crossover'):
                    signals.append(IndicatorSignal(
                        indicator='macd',
                        signal='BUY',
                        strength=SignalStrength.MODERATE,
                        confidence=0.7,
                        value=macd_data['current_macd'],
                        timestamp=timestamp,
                        metadata={'crossover': 'bullish'}
                    ))
                elif macd_data.get('bearish_crossover'):
                    signals.append(IndicatorSignal(
                        indicator='macd',
                        signal='SELL',
                        strength=SignalStrength.MODERATE, 
                        confidence=0.7,
                        value=macd_data['current_macd'],
                        timestamp=timestamp,
                        metadata={'crossover': 'bearish'}
                    ))
            
            # 4. Î≥ºÎ¶∞Ï†Ä Î∞¥Îìú Ïã†Ìò∏
            if 'bollinger' in indicators:
                bb_data = indicators['bollinger']
                if bb_data.get('price_below_lower'):
                    signals.append(IndicatorSignal(
                        indicator='bollinger',
                        signal='BUY',
                        strength=SignalStrength.WEAK,
                        confidence=0.5,
                        value=bb_data['bb_position'],
                        timestamp=timestamp,
                        metadata={'condition': 'below_lower_band'}
                    ))
                elif bb_data.get('price_above_upper'):
                    signals.append(IndicatorSignal(
                        indicator='bollinger',
                        signal='SELL',
                        strength=SignalStrength.WEAK,
                        confidence=0.5,
                        value=bb_data['bb_position'],
                        timestamp=timestamp,
                        metadata={'condition': 'above_upper_band'}
                    ))
            
            # 5. Ïä§ÌÜ†Ï∫êÏä§Ìã± Ïã†Ìò∏
            if 'stochastic' in indicators:
                stoch_data = indicators['stochastic']
                if stoch_data.get('bullish_crossover') and stoch_data.get('oversold'):
                    signals.append(IndicatorSignal(
                        indicator='stochastic',
                        signal='BUY',
                        strength=SignalStrength.MODERATE,
                        confidence=0.6,
                        value=stoch_data['current_k'],
                        timestamp=timestamp,
                        metadata={'crossover': 'bullish_from_oversold'}
                    ))
                elif stoch_data.get('bearish_crossover') and stoch_data.get('overbought'):
                    signals.append(IndicatorSignal(
                        indicator='stochastic',
                        signal='SELL',
                        strength=SignalStrength.MODERATE,
                        confidence=0.6,
                        value=stoch_data['current_k'],
                        timestamp=timestamp,
                        metadata={'crossover': 'bearish_from_overbought'}
                    ))
            
            logger.info(f"üìä Generated {len(signals)} individual signals")
            
        except Exception as e:
            logger.error(f"üî¥ Error generating individual signals: {e}")
        
        return signals
    
    def create_composite_signal(self, signals: List[IndicatorSignal], indicators: Dict) -> CompositeSignal:
        """Î≥µÌï© Ïã†Ìò∏ ÏÉùÏÑ±"""
        try:
            if not signals:
                return CompositeSignal(
                    overall_signal='HOLD',
                    confidence=0.0,
                    strength=SignalStrength.VERY_WEAK,
                    contributing_signals=[],
                    trend_direction=TrendDirection.SIDEWAYS,
                    timestamp=datetime.now()
                )
            
            # Ïã†Ìò∏ Ï†êÏàò Í≥ÑÏÇ∞
            buy_score = 0.0
            sell_score = 0.0
            total_weight = 0.0
            
            for signal in signals:
                weight = self.indicator_weights.get(signal.indicator, 0.1)
                score = signal.confidence * signal.strength.value * weight
                
                if signal.signal == 'BUY':
                    buy_score += score
                elif signal.signal == 'SELL':
                    sell_score += score
                
                total_weight += weight
            
            # Ï†ïÍ∑úÌôî
            if total_weight > 0:
                buy_score /= total_weight
                sell_score /= total_weight
            
            # ÏµúÏ¢Ö Ïã†Ìò∏ Í≤∞Ï†ï
            if buy_score > sell_score and buy_score > 0.5:
                overall_signal = 'BUY'
                confidence = buy_score
            elif sell_score > buy_score and sell_score > 0.5:
                overall_signal = 'SELL'
                confidence = sell_score
            else:
                overall_signal = 'HOLD'
                confidence = abs(buy_score - sell_score)
            
            # Ïã†Ìò∏ Í∞ïÎèÑ Í≤∞Ï†ï
            if confidence > 0.8:
                strength = SignalStrength.VERY_STRONG
            elif confidence > 0.6:
                strength = SignalStrength.STRONG
            elif confidence > 0.4:
                strength = SignalStrength.MODERATE
            elif confidence > 0.2:
                strength = SignalStrength.WEAK
            else:
                strength = SignalStrength.VERY_WEAK
            
            # Ìä∏Î†åÎìú Î∞©Ìñ• Í≤∞Ï†ï
            trend_direction = self._determine_trend_direction(indicators)
            
            composite = CompositeSignal(
                overall_signal=overall_signal,
                confidence=confidence,
                strength=strength,
                contributing_signals=signals,
                trend_direction=trend_direction,
                timestamp=datetime.now()
            )
            
            # ÌûàÏä§ÌÜ†Î¶¨Ïóê Ï∂îÍ∞Ä
            self.signal_history.append(composite)
            if len(self.signal_history) > self.max_history:
                self.signal_history.pop(0)
            
            logger.info(f"üéØ Composite signal: {overall_signal} (confidence: {confidence:.2f}, strength: {strength.name})")
            
            return composite
            
        except Exception as e:
            logger.error(f"üî¥ Error creating composite signal: {e}")
            return CompositeSignal(
                overall_signal='HOLD',
                confidence=0.0,
                strength=SignalStrength.VERY_WEAK,
                contributing_signals=signals,
                trend_direction=TrendDirection.SIDEWAYS,
                timestamp=datetime.now()
            )
    
    def _determine_trend_direction(self, indicators: Dict) -> TrendDirection:
        """Ìä∏Î†åÎìú Î∞©Ìñ• Í≤∞Ï†ï"""
        try:
            bullish_count = 0
            bearish_count = 0
            
            # ADX Í∏∞Î∞ò Ìä∏Î†åÎìú Í∞ïÎèÑ ÌôïÏù∏
            if 'adx' in indicators:
                adx_data = indicators['adx']
                if adx_data.get('current_adx', 0) < 20:
                    return TrendDirection.SIDEWAYS
                
                if adx_data.get('bullish_trend'):
                    bullish_count += 2
                elif adx_data.get('bearish_trend'):
                    bearish_count += 2
            
            # Ïù¥ÏπòÎ™®Ïø† Íµ¨Î¶Ñ ÏúÑÏπò
            if 'ichimoku' in indicators:
                ich_data = indicators['ichimoku']
                if ich_data.get('price_above_cloud'):
                    bullish_count += 1
                elif ich_data.get('price_below_cloud'):
                    bearish_count += 1
            
            # MACD ÌûàÏä§ÌÜ†Í∑∏Îû® Î∞©Ìñ•
            if 'macd' in indicators:
                macd_data = indicators['macd']
                if macd_data.get('current_histogram', 0) > 0:
                    bullish_count += 1
                else:
                    bearish_count += 1
            
            if bullish_count > bearish_count:
                return TrendDirection.BULLISH
            elif bearish_count > bullish_count:
                return TrendDirection.BEARISH
            else:
                return TrendDirection.SIDEWAYS
                
        except Exception as e:
            logger.error(f"üî¥ Error determining trend direction: {e}")
            return TrendDirection.SIDEWAYS
    
    def get_signal_summary(self) -> Dict[str, Any]:
        """Ïã†Ìò∏ ÏöîÏïΩ Ï†ïÎ≥¥"""
        if not self.signal_history:
            return {'message': 'No signals generated yet'}
        
        recent_signals = self.signal_history[-10:]  # ÏµúÍ∑º 10Í∞ú Ïã†Ìò∏
        
        signal_counts = {'BUY': 0, 'SELL': 0, 'HOLD': 0}
        confidence_sum = 0
        
        for signal in recent_signals:
            signal_counts[signal.overall_signal] += 1
            confidence_sum += signal.confidence
        
        avg_confidence = confidence_sum / len(recent_signals)
        
        return {
            'total_signals': len(self.signal_history),
            'recent_signals': len(recent_signals),
            'signal_distribution': signal_counts,
            'average_confidence': round(avg_confidence, 3),
            'latest_signal': {
                'signal': recent_signals[-1].overall_signal,
                'confidence': round(recent_signals[-1].confidence, 3),
                'strength': recent_signals[-1].strength.name,
                'trend': recent_signals[-1].trend_direction.value,
                'contributing_indicators': len(recent_signals[-1].contributing_signals),
                'timestamp': recent_signals[-1].timestamp.isoformat()
            }
        }

# ÌÖåÏä§Ìä∏ Ìï®Ïàò
async def test_advanced_indicators():
    """Advanced Indicators ÌÖåÏä§Ìä∏"""
    print("üß™ Testing Advanced Indicators...")
    
    # ÏÉòÌîå Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±
    dates = pd.date_range('2025-01-01', periods=100, freq='5min')
    np.random.seed(42)
    
    price_base = 50000
    price_data = price_base + np.cumsum(np.random.randn(100) * 100)
    
    df = pd.DataFrame({
        'timestamp': dates,
        'open': price_data + np.random.randn(100) * 50,
        'high': price_data + np.abs(np.random.randn(100) * 100),
        'low': price_data - np.abs(np.random.randn(100) * 100),
        'close': price_data,
        'volume': np.random.randint(1000, 10000, 100)
    })
    
    # ÌÖåÏä§Ìä∏ Ïã§Ìñâ
    indicator_calc = AdvancedIndicators()
    
    # Î™®Îì† ÏßÄÌëú Í≥ÑÏÇ∞
    indicators = indicator_calc.calculate_all_indicators(df)
    print(f"üìä Calculated indicators: {list(indicators.keys())}")
    
    # Í∞úÎ≥Ñ Ïã†Ìò∏ ÏÉùÏÑ±
    individual_signals = indicator_calc.generate_individual_signals(indicators)
    print(f"üéØ Generated {len(individual_signals)} individual signals")
    
    for signal in individual_signals:
        print(f"  - {signal.indicator}: {signal.signal} ({signal.strength.name}, conf: {signal.confidence:.2f})")
    
    # Î≥µÌï© Ïã†Ìò∏ ÏÉùÏÑ±
    composite = indicator_calc.create_composite_signal(individual_signals, indicators)
    print(f"üèÜ Composite signal: {composite.overall_signal}")
    print(f"  - Confidence: {composite.confidence:.2f}")
    print(f"  - Strength: {composite.strength.name}")
    print(f"  - Trend: {composite.trend_direction.value}")
    print(f"  - Contributing signals: {len(composite.contributing_signals)}")
    
    # ÏöîÏïΩ Ï†ïÎ≥¥
    summary = indicator_calc.get_signal_summary()
    print(f"üìà Summary: {summary}")

if __name__ == "__main__":
    import asyncio
    asyncio.run(test_advanced_indicators())